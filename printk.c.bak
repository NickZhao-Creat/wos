#include "printk.h"
#include "string.h"

int g_scr_x;
int g_scr_y;

void __put_c(char c, int x)
{
	asm("movw $0x18, %%ax\n\t"
        	"movw %%ax, %%gs\n\t"
        	"movb $0x07, %%ah\n\t"
        	"movb %0, %%al\n\t"
        	"movl %1, %%edi\n\t"
        	"movw %%ax, %%gs:(%%edi)\n\t"
		::"m"(c),"m"(x));
}

void put_c(char c)
{
	int x;
	
	if (c == '\n') {
		g_scr_x++;
		g_scr_y = 0;
		return ;
	}

	x = (24 * g_scr_x + g_scr_y) * 2;
	__put_c(c, x);

	if (g_scr_y <= 80) {
		g_scr_y++;
	}
	else {
		g_scr_x++;
		if (g_scr_x == 24)
			g_scr_x = 0;
		g_scr_y = 0;
	}
}

void put_s(char *string)
{
	char *s = string;

	if (!string)
		return ;

	while (*s) {
		put_c(*s);
		s++;
	}
}

int vfprintf(char *format, va_list arg)
{
	int flag = 0, ret = 0;
	const char *p = format;

	while (*p) {
		switch (*p) {
		case '%':
			if (flag) {
				flag = 0;
				put_c(*p);
				ret++;
			}
			else {
				flag = 1;
			}
			break;
		case 'd':
			if (flag) {
				char buf[16];
				flag = 0;

				itoa(va_arg(arg, int), buf, 10);
				put_s(buf);
				ret += strlen(buf);
			}
			else {
				put_c(*p);
				ret++;
			}
			break;
                case 'x':
                        if (flag) {
                                char buf[16];
                                flag = 0;

                                itoa(va_arg(arg, int), buf, 16);
                                put_s(buf);
                                ret += strlen(buf);
                        }
                        else {
                                put_c(*p);
                                ret++;
                        }
                        break;
		case 's':
			if (flag) {
				const char *str = va_arg(arg, char*);
				flag = 0;
				
				put_s(str);
				ret += strlen(str);
			}
			else {
				put_c(*p);
				ret++;
			}
			break;
                case 'c':
                        if (flag) {
                                const char s = va_arg(arg, char);
                                flag = 0;

                                put_c(s);
				ret++;
                        }
                        else {
                                put_c(*p);
                                ret++;
                        }
                        break;
		case '\n':
			g_scr_x++;
			g_scr_y = 0;
			break;
		default:
			put_c(*p);
			ret++;
			break;
		}
		*p++;
	}

	va_end(arg);
	return ret;
}

int printk(const char *format, ...)
{
	va_list arg;
	va_start(arg, format);

	return vfprintf(format, arg);
}

void init_screen(void)
{
	g_scr_x = g_scr_y = 0;
}
